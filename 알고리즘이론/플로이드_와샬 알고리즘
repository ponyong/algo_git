그래프 이론

최단거리를 구하는 알고리즘 


1. Dijkstra 알고리즘 vs 플로이드 와샬 알고리즘 

# Dijkstra = 하나의 정점에서 출발하였을 때 다른 모든 정점으로의 최단 경로를 구하는 알고리즘
# 플로이드 와샬 = 모든 정점에서 모든 정점으로의 최단 경로를 구하는 알고리즘 

<핵심 이론> 
거쳐가는 정점을 기준으로 최단거리를 구하는 것 (갱신)

 0   5  INF  8
 7   0   9  INF
 2  INF  0   4
INF INF  3   0

public static void floydWarshall() {
	// 기준이 되는 거쳐가는 노드 K
	for(int k = 1; k <= N; k++) {
		// 출발하는 노드 i
		for(int i=1; i <= N; i++) {
			// 도착하는 노드 j
			for(int j=1; j <= N; j++) {
			//i에서 k를 거쳤다가 k에서 j 까지 가는 거리와 i에서 j 까지 가는 거리를 비교해서 작은 값이 최소거리이다.
				distance[i][j] = Math.min(distance[i][k] + distance[k][j], distance[i][j]);
			}
		}
	}
}

각 노드를 한번씩 거쳐가는 기준점 K로 설정하고 A 에서 B 로 이동한다고 했을때

A 에서 B로 가는 비용 VS A에서 K로 갔다가 B로 가는 비용을 비교하여 더 작은값을 A 에서 B 로 가는 비용으로 갱신해준다.

정점의 개수를 V 라고 했을 때  O(V^3) 의 시간 복잡도를 갖는다.